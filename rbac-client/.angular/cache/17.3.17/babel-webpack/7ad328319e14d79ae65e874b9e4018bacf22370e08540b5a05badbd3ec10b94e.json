{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../user.service\";\nfunction UserFormComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2)(1, \"label\", 14);\n    i0.ɵɵtext(2, \"Password\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"input\", 15);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UserFormComponent_option_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 16);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const role_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", role_r1);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(role_r1);\n  }\n}\nfunction UserFormComponent_div_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r1.error);\n  }\n}\nexport let UserFormComponent = /*#__PURE__*/(() => {\n  class UserFormComponent {\n    constructor(fb, route, router, userService) {\n      this.fb = fb;\n      this.route = route;\n      this.router = router;\n      this.userService = userService;\n      this.isEdit = false;\n      this.userId = null;\n      this.roles = ['Editor', 'Viewer'];\n      this.error = null;\n      this.userForm = this.fb.group({\n        username: ['', Validators.required],\n        email: ['', [Validators.required, Validators.email]],\n        role: ['', Validators.required],\n        password: [''] // required only on create\n      });\n    }\n    ngOnInit() {\n      this.userId = this.route.snapshot.paramMap.get('id');\n      this.isEdit = !!this.userId;\n      if (this.isEdit) {\n        this.userService.getUserById(this.userId).subscribe({\n          next: user => {\n            this.userForm.patchValue({\n              username: user.username,\n              email: user.email,\n              role: user.roles[0] || ''\n            });\n            this.userForm.get('password')?.clearValidators();\n            this.userForm.get('password')?.updateValueAndValidity();\n          },\n          error: () => this.error = 'Failed to load user.'\n        });\n      } else {\n        this.userForm.get('password')?.setValidators(Validators.required);\n      }\n    }\n    onSubmit() {\n      if (this.userForm.invalid) return;\n      const user = this.userForm.value;\n      if (this.isEdit) {\n        this.userService.updateUser(this.userId, user).subscribe({\n          next: () => this.router.navigate(['/users']),\n          error: () => this.error = 'Failed to update user.'\n        });\n      } else {\n        this.userService.createUser(user).subscribe({\n          next: () => this.router.navigate(['/users']),\n          error: () => this.error = 'Failed to create user.'\n        });\n      }\n    }\n    static {\n      this.ɵfac = function UserFormComponent_Factory(t) {\n        return new (t || UserFormComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.UserService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: UserFormComponent,\n        selectors: [[\"app-user-form\"]],\n        decls: 23,\n        vars: 7,\n        consts: [[1, \"user-form-wrapper\"], [1, \"user-form\", 3, \"ngSubmit\", \"formGroup\"], [1, \"form-group\"], [\"for\", \"username\"], [\"id\", \"username\", \"formControlName\", \"username\", \"type\", \"text\"], [\"for\", \"email\"], [\"id\", \"email\", \"formControlName\", \"email\", \"type\", \"email\"], [\"class\", \"form-group\", 4, \"ngIf\"], [\"for\", \"role\"], [\"id\", \"role\", \"formControlName\", \"role\"], [\"value\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"submit\", 3, \"disabled\"], [\"class\", \"error\", 4, \"ngIf\"], [\"for\", \"password\"], [\"id\", \"password\", \"formControlName\", \"password\", \"type\", \"password\"], [3, \"value\"], [1, \"error\"]],\n        template: function UserFormComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1);\n            i0.ɵɵlistener(\"ngSubmit\", function UserFormComponent_Template_form_ngSubmit_1_listener() {\n              return ctx.onSubmit();\n            });\n            i0.ɵɵelementStart(2, \"h2\");\n            i0.ɵɵtext(3);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(4, \"div\", 2)(5, \"label\", 3);\n            i0.ɵɵtext(6, \"Username\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(7, \"input\", 4);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(8, \"div\", 2)(9, \"label\", 5);\n            i0.ɵɵtext(10, \"Email\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(11, \"input\", 6);\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(12, UserFormComponent_div_12_Template, 4, 0, \"div\", 7);\n            i0.ɵɵelementStart(13, \"div\", 2)(14, \"label\", 8);\n            i0.ɵɵtext(15, \"Role\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(16, \"select\", 9)(17, \"option\", 10);\n            i0.ɵɵtext(18, \"Select Role\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(19, UserFormComponent_option_19_Template, 2, 2, \"option\", 11);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(20, \"button\", 12);\n            i0.ɵɵtext(21);\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(22, UserFormComponent_div_22_Template, 2, 1, \"div\", 13);\n            i0.ɵɵelementEnd()();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"formGroup\", ctx.userForm);\n            i0.ɵɵadvance(2);\n            i0.ɵɵtextInterpolate(ctx.isEdit ? \"Edit User\" : \"Create New User\");\n            i0.ɵɵadvance(9);\n            i0.ɵɵproperty(\"ngIf\", !ctx.isEdit);\n            i0.ɵɵadvance(7);\n            i0.ɵɵproperty(\"ngForOf\", ctx.roles);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"disabled\", ctx.userForm.invalid);\n            i0.ɵɵadvance();\n            i0.ɵɵtextInterpolate(ctx.isEdit ? \"Update\" : \"Create\");\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", ctx.error);\n          }\n        },\n        styles: [\".user-form-wrapper[_ngcontent-%COMP%]{display:flex;justify-content:center;align-items:center;padding:3rem 1rem;background-color:#f4f7fa;min-height:80vh}.user-form[_ngcontent-%COMP%]{background-color:#fff;padding:2rem 2.5rem;border-radius:12px;box-shadow:0 4px 16px #0000001a;width:100%;max-width:500px}.user-form[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%]{text-align:center;color:#002b5c;margin-bottom:1.5rem}.user-form[_ngcontent-%COMP%]   .form-group[_ngcontent-%COMP%]{margin-bottom:1rem}.user-form[_ngcontent-%COMP%]   .form-group[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]{display:block;font-weight:600;color:#002b5c;margin-bottom:.3rem}.user-form[_ngcontent-%COMP%]   .form-group[_ngcontent-%COMP%]   input[_ngcontent-%COMP%], .user-form[_ngcontent-%COMP%]   .form-group[_ngcontent-%COMP%]   select[_ngcontent-%COMP%]{width:100%;padding:.5rem .75rem;font-size:1rem;border:1px solid #ccc;border-radius:6px}.user-form[_ngcontent-%COMP%]   .form-group[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]:focus, .user-form[_ngcontent-%COMP%]   .form-group[_ngcontent-%COMP%]   select[_ngcontent-%COMP%]:focus{outline:none;border-color:#0056b3}.user-form[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{width:100%;padding:.6rem;background-color:#002b5c;color:#fff;font-weight:700;border:none;border-radius:6px;margin-top:1rem;cursor:pointer}.user-form[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:hover{background-color:#003a80}.user-form[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:disabled{background-color:#8aa0c8;cursor:not-allowed}.user-form[_ngcontent-%COMP%]   .error[_ngcontent-%COMP%]{color:red;text-align:center;margin-top:1rem}\"]\n      });\n    }\n  }\n  return UserFormComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}