{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@auth0/angular-jwt\";\nimport * as i3 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, jwtHelper, router) {\n    this.http = http;\n    this.jwtHelper = jwtHelper;\n    this.router = router;\n    this.apiUrl = `${environment.apiUrl}/api/auth`;\n    this.tokenKey = 'access_token';\n  }\n  login(data) {\n    return this.http.post(`${this.apiUrl}/login`, data);\n  }\n  register(data) {\n    return this.http.post(`${this.apiUrl}/register`, data);\n  }\n  logout() {\n    localStorage.removeItem(this.tokenKey);\n    this.router.navigate(['/login']);\n  }\n  saveToken(token) {\n    localStorage.setItem(this.tokenKey, token);\n  }\n  getToken() {\n    return localStorage.getItem(this.tokenKey);\n  }\n  isLoggedIn() {\n    const token = this.getToken();\n    return token !== null && !this.jwtHelper.isTokenExpired(token);\n  }\n  getUserRole() {\n    const token = this.getToken();\n    if (!token) return;\n    const decodedToken = this.jwtHelper.decodeToken(token);\n    const roles = decodedToken['role'];\n    return Array.isArray(roles) ? roles[0] : roles;\n  }\n  getUsername() {\n    const token = this.getToken();\n    if (!token) return '';\n    const decodedToken = this.jwtHelper.decodeToken(token);\n    return decodedToken['unique_name'] || decodedToken['name'];\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.JwtHelperService), i0.ɵɵinject(i3.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["environment","AuthService","constructor","http","jwtHelper","router","apiUrl","tokenKey","login","data","post","register","logout","localStorage","removeItem","navigate","saveToken","token","setItem","getToken","getItem","isLoggedIn","isTokenExpired","getUserRole","decodedToken","decodeToken","roles","Array","isArray","getUsername","i0","ɵɵinject","i1","HttpClient","i2","JwtHelperService","i3","Router","factory","ɵfac","providedIn"],"sources":["D:\\my projects\\RBAC\\rbac-client\\src\\app\\core\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { JwtHelperService } from '@auth0/angular-jwt';\r\nimport { Router } from '@angular/router';\r\nimport { LoginDto } from '../shared/models/login.model';\r\nimport { RegisterDto } from '../shared/models/register.model';\r\nimport { Role } from '../shared/enums';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private apiUrl = `${environment.apiUrl}/api/auth`; \r\n  private tokenKey = 'access_token';\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private jwtHelper: JwtHelperService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  login(data: LoginDto) {\r\n    return this.http.post(`${this.apiUrl}/login`, data);\r\n  }\r\n\r\n  register(data: RegisterDto) {\r\n    return this.http.post(`${this.apiUrl}/register`, data);\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem(this.tokenKey);\r\n    this.router.navigate(['/login']);\r\n  }\r\n\r\n  saveToken(token: string) {\r\n    localStorage.setItem(this.tokenKey, token);\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return localStorage.getItem(this.tokenKey);\r\n  }\r\n\r\n  isLoggedIn(): boolean {\r\n    const token = this.getToken();\r\n    return token !== null && !this.jwtHelper.isTokenExpired(token);\r\n  }\r\n\r\n  getUserRole(): Role {\r\n    const token = this.getToken();\r\n    if (!token) return ;\r\n    const decodedToken = this.jwtHelper.decodeToken(token);\r\n    const roles = decodedToken['role'];\r\n    return Array.isArray(roles) ? roles[0] : roles;\r\n  }\r\n\r\n  getUsername(): string {\r\n    const token = this.getToken();\r\n    if (!token) return '';\r\n    const decodedToken = this.jwtHelper.decodeToken(token);\r\n    return decodedToken['unique_name'] || decodedToken['name'];\r\n  }\r\n}\r\n"],"mappings":"AAOA,SAASA,WAAW,QAAQ,8BAA8B;;;;;AAK1D,OAAM,MAAOC,WAAW;EAItBC,YACUC,IAAgB,EAChBC,SAA2B,EAC3BC,MAAc;IAFd,KAAAF,IAAI,GAAJA,IAAI;IACJ,KAAAC,SAAS,GAATA,SAAS;IACT,KAAAC,MAAM,GAANA,MAAM;IANR,KAAAC,MAAM,GAAG,GAAGN,WAAW,CAACM,MAAM,WAAW;IACzC,KAAAC,QAAQ,GAAG,cAAc;EAM9B;EAEHC,KAAKA,CAACC,IAAc;IAClB,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAAC,GAAG,IAAI,CAACJ,MAAM,QAAQ,EAAEG,IAAI,CAAC;EACrD;EAEAE,QAAQA,CAACF,IAAiB;IACxB,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAAC,GAAG,IAAI,CAACJ,MAAM,WAAW,EAAEG,IAAI,CAAC;EACxD;EAEAG,MAAMA,CAAA;IACJC,YAAY,CAACC,UAAU,CAAC,IAAI,CAACP,QAAQ,CAAC;IACtC,IAAI,CAACF,MAAM,CAACU,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EAClC;EAEAC,SAASA,CAACC,KAAa;IACrBJ,YAAY,CAACK,OAAO,CAAC,IAAI,CAACX,QAAQ,EAAEU,KAAK,CAAC;EAC5C;EAEAE,QAAQA,CAAA;IACN,OAAON,YAAY,CAACO,OAAO,CAAC,IAAI,CAACb,QAAQ,CAAC;EAC5C;EAEAc,UAAUA,CAAA;IACR,MAAMJ,KAAK,GAAG,IAAI,CAACE,QAAQ,EAAE;IAC7B,OAAOF,KAAK,KAAK,IAAI,IAAI,CAAC,IAAI,CAACb,SAAS,CAACkB,cAAc,CAACL,KAAK,CAAC;EAChE;EAEAM,WAAWA,CAAA;IACT,MAAMN,KAAK,GAAG,IAAI,CAACE,QAAQ,EAAE;IAC7B,IAAI,CAACF,KAAK,EAAE;IACZ,MAAMO,YAAY,GAAG,IAAI,CAACpB,SAAS,CAACqB,WAAW,CAACR,KAAK,CAAC;IACtD,MAAMS,KAAK,GAAGF,YAAY,CAAC,MAAM,CAAC;IAClC,OAAOG,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,GAAGA,KAAK,CAAC,CAAC,CAAC,GAAGA,KAAK;EAChD;EAEAG,WAAWA,CAAA;IACT,MAAMZ,KAAK,GAAG,IAAI,CAACE,QAAQ,EAAE;IAC7B,IAAI,CAACF,KAAK,EAAE,OAAO,EAAE;IACrB,MAAMO,YAAY,GAAG,IAAI,CAACpB,SAAS,CAACqB,WAAW,CAACR,KAAK,CAAC;IACtD,OAAOO,YAAY,CAAC,aAAa,CAAC,IAAIA,YAAY,CAAC,MAAM,CAAC;EAC5D;;;uBAjDWvB,WAAW,EAAA6B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,gBAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAK,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAAXpC,WAAW;MAAAqC,OAAA,EAAXrC,WAAW,CAAAsC,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}