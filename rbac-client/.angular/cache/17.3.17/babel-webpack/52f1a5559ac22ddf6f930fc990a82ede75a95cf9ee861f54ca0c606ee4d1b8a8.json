{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nexport class JwtInterceptor {\n  constructor(auth) {\n    this.auth = auth;\n  }\n  intercept(req, next) {\n    const token = this.auth.getToken();\n    if (token) {\n      req = req.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n    return next.handle(req);\n  }\n  static {\n    this.ɵfac = function JwtInterceptor_Factory(t) {\n      return new (t || JwtInterceptor)(i0.ɵɵinject(i1.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: JwtInterceptor,\n      factory: JwtInterceptor.ɵfac\n    });\n  }\n}","map":{"version":3,"names":["JwtInterceptor","constructor","auth","intercept","req","next","token","getToken","clone","setHeaders","Authorization","handle","i0","ɵɵinject","i1","AuthService","factory","ɵfac"],"sources":["D:\\my projects\\RBAC\\rbac-client\\src\\app\\core\\jwt-interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable()\r\nexport class JwtInterceptor implements HttpInterceptor {\r\n  constructor(private auth: AuthService) {}\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\r\n    const token = this.auth.getToken();\r\n    if (token) {\r\n      req = req.clone({\r\n        setHeaders: { Authorization: `Bearer ${token}` }\r\n      });\r\n    }\r\n    return next.handle(req);\r\n  }\r\n}\r\n"],"mappings":";;AAKA,OAAM,MAAOA,cAAc;EACzBC,YAAoBC,IAAiB;IAAjB,KAAAA,IAAI,GAAJA,IAAI;EAAgB;EAExCC,SAASA,CAACC,GAAqB,EAAEC,IAAiB;IAChD,MAAMC,KAAK,GAAG,IAAI,CAACJ,IAAI,CAACK,QAAQ,EAAE;IAClC,IAAID,KAAK,EAAE;MACTF,GAAG,GAAGA,GAAG,CAACI,KAAK,CAAC;QACdC,UAAU,EAAE;UAAEC,aAAa,EAAE,UAAUJ,KAAK;QAAE;OAC/C,CAAC;IACJ;IACA,OAAOD,IAAI,CAACM,MAAM,CAACP,GAAG,CAAC;EACzB;;;uBAXWJ,cAAc,EAAAY,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA;IAAA;EAAA;;;aAAdf,cAAc;MAAAgB,OAAA,EAAdhB,cAAc,CAAAiB;IAAA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}